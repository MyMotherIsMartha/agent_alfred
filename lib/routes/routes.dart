import 'package:agent37_flutter/views/index.dart';
import 'package:flutter/material.dart';
import './router_handler.dart';
import 'package:fluro/fluro.dart';

class Routes {
  static String root = '/';
  static String index = '/index';
  static String loginPage = '/login';
  static String registerPage = '/register';
  static String forgetPage = '/forget';
  static String messageCenter = '/messageCenter';
  static String customerService = '/customerService';
  static String updateUserPage = '/update-user';
  static String createAccountPage = '/create-account';
  static String addressPage = '/address';
  static String createOrderPage = '/create-order';
  static String certificatePage = '/certificate';
  static String orderResultPage = '/order-result';
  static String finePointPage = '/fine-point';
  static String uploadEnterPrisePic = '/uploadEnterPrisePic';
  static String uploadLicenseForm = '/uploadLicenseForm';
  static String resultPage = '/resultPage';
  static String vipManage = '/vipManage';
  static String vipSearch = '/vipManage/search';
  static String vipDetail = '/vipDetail';
  static String agentManage = '/agentManage';
  static String agentManageSearch = '/agentManage/search';
  static String agentVerify = '/agentVerify';
  static String perfectEnterprise1 = '/perfectEnterprise1';
  static String perfectEnterprise2 = '/perfectEnterprise2';
  static String perfectEnterpriseAudit = '/perfectEnterpriseAudit';
  static String readPerfectInfo = '/readPerfectInfo';
  static String walletMain = '/walletMain';
  static String walletWithdraw = '/walletMain/withdraw';
  static String billHistory = '/walletMain/billHistory';
  static String invoiceList = '/invoiceList';
  static String invoiceDetail = '/invoiceDetail';
  static String sendAdress = '/sendAdress';
  static String bankMain = '/bankMain';
  static String bankForm = '/bankForm';
  static String financePage = '/finance';
  static String financeSearchPage = '/finance/search';
  static String setting = '/setting';
  static String settingUserinfo = '/setting/userinfo';
  static String settingNickname = '/setting/nickname';
  static String settingSafe = '/setting/safe';
  static String settingpwd = '/setting/pwd';
  static String resetPwd = '/setting/resetpwd';
  static String resetMobile = '/setting/mobile';
  static String marketSearch = '/market/search';
  static String marketApplyMetting = '/market/apply';
  static String marketApplyResult = '/market/apply-result';
  static String marketCourse = '/market/course';
  static String marketMeeting = '/market/meeting';
  static String moduleDetail = '/module';
  static String webviewPage = '/webview/:url';
  static void configureRoutes(Router router) {
    router.notFoundHandler = new Handler(
        handlerFunc: (BuildContext context, Map<String, List<String>> params) {
      print('ERROR====>ROUTE WAS NOT FONUND!!!');
      return IndexPage();
    });
    router.define(root, handler: splashHandler);
    router.define(index, handler: indexHandler);
    router.define(loginPage, handler: loginHandler);
    router.define(registerPage, handler: registerHandler);
    router.define(forgetPage, handler: forgetHandler);
    router.define(messageCenter, handler: messageCenterHandler);
    router.define(customerService, handler: customerServiceHandler);
    router.define(updateUserPage, handler: updateUserHandler);
    router.define(createAccountPage, handler: createAccountHandler);
    router.define(addressPage, handler: addressHandler);
    router.define(createOrderPage, handler: createOrderHandler);
    router.define(certificatePage, handler: certificateHandler);
    router.define(orderResultPage, handler: orderResultHandler);
    router.define(finePointPage, handler: finePointHandel);
    router.define(uploadEnterPrisePic, handler: uploadEnterPrisePicHandler);
    router.define(uploadLicenseForm, handler: uploadLicenseFormHandler);
    router.define(resultPage, handler: resultPageHandler);
    router.define(vipManage, handler: vipManageHandler);
    router.define(vipSearch, handler: vipSearchHandler);
    router.define(vipDetail, handler: vipDetailHandler);
    router.define(agentManage, handler: agentManageHandler);
    router.define(agentManageSearch, handler: agentManageSearchHandler);
    router.define(agentVerify, handler: agentVerifyHandler);
    router.define(perfectEnterprise1, handler: perfectEnterprise1Handler);
    router.define(perfectEnterprise2, handler: perfectEnterprise2Handler);
    router.define(perfectEnterpriseAudit, handler: perfectEnterpriseAuditHandler);
    router.define(readPerfectInfo, handler: readPerfectInfoHandler);
    router.define(financePage, handler: financeHandler);
    router.define(financeSearchPage, handler: financeSearchHandler);
    router.define(walletMain, handler: walletMainHandler);
    router.define(walletWithdraw, handler: walletWithdrawHandler);
    router.define(billHistory, handler: billHistoryHandler);
    router.define(invoiceList, handler: invoiceListHandler);
    router.define(invoiceDetail, handler: invoiceDetailHandler);
    router.define(sendAdress, handler: sendAdressHandler);
    router.define(bankMain, handler: bankMainHandler);
    router.define(bankForm, handler: bankFormHandler);
    router.define(setting, handler: settingHandler);
    router.define(settingUserinfo, handler: settingUserInfoHandler);
    router.define(settingNickname, handler: settingNicknameHandler);
    router.define(settingSafe, handler: settingSafeHandler);
    router.define(settingpwd, handler: settingPwdHandler);
    router.define(resetPwd, handler: resetPwdHandler);
    router.define(resetMobile, handler: resetMobileHandler);
    router.define(marketSearch, handler: marketSearchHandler);
    router.define(marketApplyMetting, handler: marketApplyMettingHandler);
    router.define(marketApplyResult, handler: marketApplyResultHandler);
    router.define(marketCourse, handler: marketCourseHandler);
    router.define(marketMeeting, handler: marketMeetingHandler);
    router.define(moduleDetail, handler: moduleDetailHandler);
    router.define(webviewPage, handler: webviewHandler);
  }
}
